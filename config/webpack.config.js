var webpack = require('webpack');
var path = require('path');
var ExtractTextPlugin = require("extract-text-webpack-plugin");

/**
 * see http://webpack.github.io/docs/configuration.html
 * for webpack configuration options
 */
module.exports = [
  {
    name: "app-styles",
    context: path.join(__dirname, '..', '/web/static/css'),
    entry: './app.css',
    output: {
      path: path.join(__dirname, '..', '/priv/static/css'),
      filename: 'app.css'
    },
    module: {
      loaders: [
        {
          test: /web\/static.*\.css$/,
          loader: ExtractTextPlugin.extract('style-loader', 'css-loader')
        }
      ]
    },
    plugins: [
      new ExtractTextPlugin("app.css")
    ]
  },
  {
  name: 'app-js',

  // enable source-maps
  devtool: 'source-map',

  // 'context' sets the directory where webpack looks for module files you list in
  // your 'require' statements
  context: path.join(__dirname, '..', '/web/static/js'),

  // 'entry' specifies the entry point, where webpack starts reading all
  // dependencies listed and bundling them into the output file.
  // The entrypoint can be anywhere and named anything - here we are calling it
  // '_application' and storing it in the 'javascripts' directory to follow
  //entry: './app/webpack_javascripts/expenses/app.js',
  entry: {
    app: [
      'webpack-hot-middleware/client?path=http://localhost:8080/__webpack_hmr',
      './app.js'
    ],
    todo: [
      'webpack-hot-middleware/client?path=http://localhost:8080/__webpack_hmr',
      './todomvc/index.js'
    ]
  },

  // 'output' specifies the filepath for saving the bundled output generated by
  // wepback.
  // It is an object with options, and you can interpolate the name of the entry
  // file using '[name]' in the filename.
  // You will want to add the bundled filename to your '.gitignore'.
  output: {
    filename: '[name].js',
    // We want to save the bundle in the Asset Pipleine directory as the other JS.
    path: path.join(__dirname, '..', '/priv/static/js'),
    publicPath: 'http://localhost:8080/'
  },

  //externals: {
    // require("jquery") is external and available
    //  on the global var jQuery
    //"jquery": "jQuery"
  //},

  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoErrorsPlugin()
  ],

  resolve: {
    extensions: ['', '.js', '.jsx']
  },

  // The 'module' and 'loaders' options tell webpack to use loaders.
  // @see http://webpack.github.io/docs/using-loaders.html
  module: {
    loaders: [
      {
        // Pattern to match only files with the '.js' or '.jsx' extension.
        // This tells the loader to only run for those files.
        test: /\.jsx?$/,
        loader: 'babel',
        exclude: /node_modules/,
        query: {
          stage: 0,
          plugins: ['react-transform'],
          extra: {
            "react-transform": {
              "transforms": [{
                "transform": "react-transform-hmr",
                "imports": ["react"],
                "locals": ["module"]
              }, {
                "transform": "react-transform-catch-errors",
                "imports": ["react", "redbox-react"]
              }]
            }
          }
        }
      }
    ]
  }
}
];
